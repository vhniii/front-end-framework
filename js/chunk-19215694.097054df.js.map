{"version":3,"sources":["webpack:///./src/components/Sudoku.vue?76b3","webpack:///./src/views/Game.vue?3553","webpack:///./src/views/Game.vue?907b","webpack:///./src/components/Sudoku.vue?79e1","webpack:///src/components/Sudoku.vue","webpack:///./src/components/Sudoku.vue?0b57","webpack:///./src/components/Sudoku.vue","webpack:///src/views/Game.vue","webpack:///./src/views/Game.vue?f01b","webpack:///./src/views/Game.vue","webpack:///./node_modules/sudoku.js/sudoku.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","staticRenderFns","_v","directives","name","rawName","value","expression","on","$event","$$selectedVal","Array","prototype","filter","call","target","options","o","selected","map","val","_value","difficulty","multiple","generatePuzzle","_l","display","level","key","domProps","_s","row","rowIndex","cell","colIndex","class","original","activeRow","activeCol","isCellInvalid","setCellActive","keys","attrs","setCellValue","component","components","Sudoku","root","sudoku","DIGITS","ROWS","COLS","SQUARES","UNITS","SQUARE_UNITS_MAP","SQUARE_PEERS_MAP","MIN_GIVENS","NR_SQUARES","DIFFICULTY","initialize","_cross","_get_all_units","_get_square_units_map","_get_square_peers_map","BLANK_CHAR","BLANK_BOARD","generate","unique","easy","_force_range","blank_board","i","candidates","_get_candidates_map","shuffled_squares","_shuffle","si","square","rand_candidate_idx","_rand_range","length","rand_candidate","_assign","single_candidates","push","_strip_dups","board","givens_idxs","nr_givens","parseInt","substr","solve","reverse","report","validate_board","_in","result","_search","solution","get_candidates","candidates_map","rows","cur_row","candidate_map","squares_values_map","_get_square_vals_map","new_candidates","max_nr_candidates","nr_candidates","min_nr_candidates","min_candidates_square","min_candidates","vi","candidates_copy","JSON","parse","stringify","candidates_next","other_vals","replace","ovi","other_val","_eliminate","target_val","pi","peer","candidates_new","ui","unit","val_places","unit_square","squares_vals_map","squares","units","square_unit_map","cur_square","cur_square_units","cur_unit","indexOf","units_map","square_peers_map","cur_square_peers","sui","cur_unit_square","cols","ri","ci","row_squares","col_squares","rsi","csi","board_string_to_grid","board_string","board_grid_to_string","board_grid","r","c","print_board","V_PADDING","H_PADDING","V_BOX_PADDING","H_BOX_PADDING","display_string","console","log","a","b","ai","bi","v","seq","_first_true","shuffled","ti","max","min","Math","floor","random","seq_set","dup_map","e","nr"],"mappings":"yIAAA,yBAAke,EAAG,G,oCCAre,yBAAge,EAAG,G,kECAne,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,WAAW,IACzIG,EAAkB,GCDlB,EAAS,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,UAAU,CAACF,EAAG,MAAM,CAACE,YAAY,OAAO,CAACF,EAAG,KAAK,CAACJ,EAAIQ,GAAG,YAAYJ,EAAG,SAAS,CAACK,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,UAAUC,MAAOZ,EAAc,WAAEa,WAAW,eAAeC,GAAG,CAAC,OAAS,CAAC,SAASC,GAAQ,IAAIC,EAAgBC,MAAMC,UAAUC,OAAOC,KAAKL,EAAOM,OAAOC,SAAQ,SAASC,GAAG,OAAOA,EAAEC,YAAWC,KAAI,SAASF,GAAG,IAAIG,EAAM,WAAYH,EAAIA,EAAEI,OAASJ,EAAEX,MAAM,OAAOc,KAAO1B,EAAI4B,WAAWb,EAAOM,OAAOQ,SAAWb,EAAgBA,EAAc,IAAI,SAASD,GAAQ,OAAOf,EAAI8B,qBAAqB9B,EAAI+B,GAAI/B,EAAU,QAAE,SAASgC,EAAQC,GAAO,OAAO7B,EAAG,SAAS,CAAC8B,IAAID,EAAME,SAAS,CAAC,MAAQF,IAAQ,CAACjC,EAAIQ,GAAG,qBAAqBR,EAAIoC,GAAGJ,GAAS,uBAAsB,KAAK5B,EAAG,MAAM,CAACE,YAAY,QAAQN,EAAI+B,GAAI/B,EAAU,QAAE,SAASqC,EAAIC,GAAU,OAAOlC,EAAG,MAAM,CAAC8B,IAAII,EAAShC,YAAY,OAAON,EAAI+B,GAAG,GAAM,SAASQ,EAAKC,GAAU,OAAOpC,EAAG,MAAM,CAAC8B,IAAIM,EAASlC,YAAY,OAAOmC,MAAM,CAAC,eAA6B,IAAbD,GAA+B,IAAbA,EAAgB,gBAA8B,IAAbF,GAA+B,IAAbA,EAAgB,SAAYC,EAAKG,SAAU,OAAU1C,EAAI2C,YAAcL,GAAYtC,EAAI4C,YAAcJ,EAAU,QAAWD,EAAK3B,OAASZ,EAAI6C,cAAcP,EAAUE,EAAUD,EAAK3B,QAAQE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOf,EAAI8C,cAAcR,EAAUE,EAAUD,EAAKG,aAAa,CAAC1C,EAAIQ,GAAG,qBAAqBR,EAAIoC,GAAGG,EAAK3B,OAAO,uBAAsB,MAAK,GAAGR,EAAG,MAAM,CAACE,YAAY,OAAON,EAAI+B,GAAId,MAAM,GAAG8B,QAAQ,SAASnC,GAAO,OAAOR,EAAG,SAAS,CAAC8B,IAAItB,EAAMN,YAAY,MAAM0C,MAAM,CAAC,KAAO,SAAS,UAA8B,IAAnBhD,EAAI2C,YAAuC,IAAnB3C,EAAI4C,WAAkB9B,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOf,EAAIiD,aAAarC,EAAQ,MAAM,CAACZ,EAAIQ,GAAG,iBAAiBR,EAAIoC,GAAGxB,EAAQ,GAAG,mBAAkB,MAC/uD,EAAkB,G,YCgCtB,GACE,KAAF,SACE,KAFF,WAGI,MAAJ,CACM,OAAN,GACM,WAAN,OACM,WAAN,EACM,WAAN,EACM,OAAN,CACQ,KAAR,SACQ,OAAR,WACQ,KAAR,QACQ,YAAR,gBAIE,QAhBF,WAiBI,KAAJ,kBAEE,QAAF,CACI,eADJ,WAEM,IAAN,wCACM,KAAN,2CACA,iBACQ,OAAR,mBACU,MAAV,CACY,MAAZ,yBACY,SAAZ,gBAOI,cAfJ,SAeA,OACM,IAAN,EAAM,CAIA,GAAN,uCAGQ,OAFA,KAAR,kBACQ,KAAR,cAIM,KAAN,YACM,KAAN,cAEI,aA7BJ,SA6BA,GAKM,GAJA,KAAN,+CACM,KAAN,aACM,KAAN,aAEA,uBACQ,IAAR,GACA,WADA,sBAEA,+BAGQ,MAAR,cACQ,KAAR,mBAGI,cA5CJ,SA4CA,OACM,IAAN,EACQ,OAAR,EAGM,IAAN,gBACQ,GAAR,mCACU,OAAV,EAIM,IAAN,gBACQ,GAAR,mCACU,OAAV,EAOM,IAHA,IAAN,oBACA,oBAEA,cACQ,IAAR,kBACU,GAAV,4CACY,OAAZ,EAKM,OAAN,GAEI,eA1EJ,WA2EM,IAAN,gBACQ,IAAR,gBACU,GAAV,gDACY,OAAZ,EAKM,OAAN,KCvIgV,I,wBCQ5UsC,EAAY,eACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIa,EAAAA,E,QCTf,GACExC,KAAM,OACNyC,WAAY,CACVC,OAAJ,ICb8U,ICQ1U,G,UAAY,eACd,EACArD,EACAQ,GACA,EACA,KACA,WACA,OAIa,e,6BCVf,SAAU8C,GACN,IAAIC,EAASD,EAAKC,OAAS,GAE3BA,EAAOC,OAAS,YAChB,IAAIC,EAAO,YACPC,EAAOH,EAAOC,OACdG,EAAU,KAEVC,EAAQ,KACRC,EAAmB,KACnBC,EAAmB,KAEnBC,EAAa,GACbC,EAAa,GAIbC,EAAa,CACb,KAAgB,GAChB,OAAgB,GAChB,KAAgB,GAChB,YAAgB,GAChB,OAAgB,GAChB,QAAgB,IAUpB,SAASC,IAGLP,EAAsBJ,EAAOY,OAAOV,EAAMC,GAC1CE,EAAsBL,EAAOa,eAAeX,EAAMC,GAClDG,EAAsBN,EAAOc,sBAAsBV,EAASC,GAC5DE,EAAsBP,EAAOe,sBAAsBX,EACvBE,GAbhCN,EAAOgB,WAAa,IACpBhB,EAAOiB,YAAc,oFAiBrBjB,EAAOkB,SAAW,SAAS5C,EAAY6C,GAqCV,kBAAf7C,GAAiD,qBAAfA,IACxCA,EAAaoC,EAAWpC,IAAeoC,EAAWU,MAItD9C,EAAa0B,EAAOqB,aAAa/C,EAAYmC,EAAa,EAClDD,GAGRW,EAASA,IAAU,EAInB,IADA,IAAIG,EAAc,GACVC,EAAI,EAAGA,EAAId,IAAcc,EAC7BD,GAAe,IAEnB,IAAIE,EAAaxB,EAAOyB,oBAAoBH,GAGxCI,EAAmB1B,EAAO2B,SAASvB,GACvC,IAAI,IAAIwB,KAAMF,EAAiB,CAC3B,IAAIG,EAASH,EAAiBE,GAI1BE,EACI9B,EAAO+B,YAAYP,EAAWK,GAAQG,QAC1CC,EAAiBT,EAAWK,GAAQC,GACxC,IAAI9B,EAAOkC,QAAQV,EAAYK,EAAQI,GACnC,MAIJ,IAAIE,EAAoB,GACxB,IAAI,IAAIP,KAAMxB,EAAQ,CACdyB,EAASzB,EAAQwB,GAEW,GAA7BJ,EAAWK,GAAQG,QAClBG,EAAkBC,KAAKZ,EAAWK,IAM1C,GAAGM,EAAkBH,QAAU1D,GACvB0B,EAAOqC,YAAYF,GAAmBH,QAAU,EAAE,CACtD,IAAIM,EAAQ,GACRC,EAAc,GAClB,IAAI,IAAIhB,KAAKnB,EAAQ,CACbyB,EAASzB,EAAQmB,GACW,GAA7BC,EAAWK,GAAQG,QAClBM,GAASd,EAAWK,GACpBU,EAAYH,KAAKb,IAEjBe,GAAStC,EAAOgB,WAMxB,IAAIwB,EAAYD,EAAYP,OAC5B,GAAGQ,EAAYlE,EAAW,CACtBiE,EAAcvC,EAAO2B,SAASY,GAC9B,IAAQhB,EAAI,EAAGA,EAAIiB,EAAYlE,IAAciD,EAAE,CAC3C,IAAIxD,EAAS0E,SAASF,EAAYhB,IAClCe,EAAQA,EAAMI,OAAO,EAAG3E,GAAUiC,EAAOgB,WACrCsB,EAAMI,OAAO3E,EAAS,IAMlC,GAAGiC,EAAO2C,MAAML,GACZ,OAAOA,GAMnB,OAAOtC,EAAOkB,SAAS5C,IAK3B0B,EAAO2C,MAAQ,SAASL,EAAOM,GAY3B,IAAIC,EAAS7C,EAAO8C,eAAeR,GACnC,IAAc,IAAXO,EACC,MAAMA,EAIV,IAAIL,EAAY,EAChB,IAAI,IAAIjB,KAAKe,EACNA,EAAMf,KAAOvB,EAAOgB,YAAchB,EAAO+C,IAAIT,EAAMf,GAAIvB,EAAOC,WAC3DuC,EAGV,GAAGA,EAAYhC,EACX,KAAM,qCAAuCA,EAIjDoC,EAAUA,IAAW,EAErB,IAAIpB,EAAaxB,EAAOyB,oBAAoBa,GACxCU,EAAShD,EAAOiD,QAAQzB,EAAYoB,GAExC,GAAGI,EAAO,CACN,IAAIE,EAAW,GACf,IAAI,IAAIrB,KAAUmB,EACdE,GAAYF,EAAOnB,GAEvB,OAAOqB,EAEX,OAAO,GAGXlD,EAAOmD,eAAiB,SAASb,GAS7B,IAAIO,EAAS7C,EAAO8C,eAAeR,GACnC,IAAc,IAAXO,EACC,MAAMA,EAIV,IAAIO,EAAiBpD,EAAOyB,oBAAoBa,GAGhD,IAAIc,EACA,OAAO,EAIX,IAAIC,EAAO,GACPC,EAAU,GACV/B,EAAI,EACR,IAAI,IAAIM,KAAUuB,EAAe,CAC7B,IAAI5B,EAAa4B,EAAevB,GAChCyB,EAAQlB,KAAKZ,GACVD,EAAI,GAAK,IACR8B,EAAKjB,KAAKkB,GACVA,EAAU,MAEZ/B,EAEN,OAAO8B,GAGXrD,EAAOyB,oBAAsB,SAASa,GAOlC,IAAIO,EAAS7C,EAAO8C,eAAeR,GACnC,IAAc,IAAXO,EACC,MAAMA,EAGV,IAAIU,EAAgB,GAChBC,EAAqBxD,EAAOyD,qBAAqBnB,GAGrD,IAAI,IAAIV,KAAMxB,EACVmD,EAAcnD,EAAQwB,IAAO5B,EAAOC,OAKxC,IAAI,IAAI4B,KAAU2B,EAAmB,CACjC,IAAIpF,EAAMoF,EAAmB3B,GAE7B,GAAG7B,EAAO+C,IAAI3E,EAAK4B,EAAOC,QAAQ,CAC9B,IAAIyD,EAAiB1D,EAAOkC,QAAQqB,EAAe1B,EAAQzD,GAG3D,IAAIsF,EACA,OAAO,GAKnB,OAAOH,GAGXvD,EAAOiD,QAAU,SAASzB,EAAYoB,GAOlC,IAAIpB,EACA,OAAO,EAIXoB,EAAUA,IAAW,EAIrB,IAAIe,EAAoB,EAExB,IAAI,IAAI/B,KAAMxB,EAAQ,CAClB,IAAIyB,EAASzB,EAAQwB,GAEjBgC,EAAgBpC,EAAWK,GAAQG,OAEpC4B,EAAgBD,IACfA,EAAoBC,EACI/B,GAGhC,GAAyB,IAAtB8B,EACC,OAAOnC,EAIX,IAAIqC,EAAoB,GACpBC,EAAwB,KAC5B,IAAIlC,KAAMxB,EAAQ,CACVyB,EAASzB,EAAQwB,GAEjBgC,EAAgBpC,EAAWK,GAAQG,OAEpC4B,EAAgBC,GAAqBD,EAAgB,IACpDC,EAAoBD,EACpBE,EAAwBjC,GAQhC,IAAIkC,EAAiBvC,EAAWsC,GAChC,GAAIlB,EAiBA,IAAQoB,EAAKD,EAAe/B,OAAS,EAAGgC,GAAM,IAAKA,EAAG,CAC9C5F,EAAM2F,EAAeC,GAGrBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAU5C,IAC5C6C,EAAkBrE,EAAOiD,QACzBjD,EAAOkC,QAAQ+B,EAAiBH,EAAuB1F,GACvDwE,GAGJ,GAAGyB,EACC,OAAOA,OA3Bf,IAAI,IAAIL,KAAMD,EAAe,CACzB,IAAI3F,EAAM2F,EAAeC,GAGrBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAU5C,IAC5C6C,EAAkBrE,EAAOiD,QACzBjD,EAAOkC,QAAQ+B,EAAiBH,EAAuB1F,IAG3D,GAAGiG,EACC,OAAOA,EAwBnB,OAAO,GAGXrE,EAAOkC,QAAU,SAASV,EAAYK,EAAQzD,GAS1C,IAAIkG,EAAa9C,EAAWK,GAAQ0C,QAAQnG,EAAK,IAKjD,IAAI,IAAIoG,KAAOF,EAAW,CACtB,IAAIG,EAAYH,EAAWE,GAEvBH,EACArE,EAAO0E,WAAWlD,EAAYK,EAAQ4C,GAE1C,IAAIJ,EAEA,OAAO,EAIf,OAAO7C,GAGXxB,EAAO0E,WAAa,SAASlD,EAAYK,EAAQzD,GAU7C,IAAI4B,EAAO+C,IAAI3E,EAAKoD,EAAWK,IAC3B,OAAOL,EAIXA,EAAWK,GAAUL,EAAWK,GAAQ0C,QAAQnG,EAAK,IAIrD,IAAIwF,EAAgBpC,EAAWK,GAAQG,OACvC,GAAqB,IAAlB4B,EAAoB,CACnB,IAAIe,EAAanD,EAAWK,GAE5B,IAAI,IAAI+C,KAAMrE,EAAiBsB,GAAQ,CACnC,IAAIgD,EAAOtE,EAAiBsB,GAAQ+C,GAEhCE,EACI9E,EAAO0E,WAAWlD,EAAYqD,EAAMF,GAE5C,IAAIG,EACA,OAAO,GAMjB,GAAqB,IAAlBlB,EACD,OAAO,EAIX,IAAI,IAAImB,KAAMzE,EAAiBuB,GAAQ,CACnC,IAAImD,EAAO1E,EAAiBuB,GAAQkD,GAEhCE,EAAa,GACjB,IAAI,IAAIrD,KAAMoD,EAAK,CACf,IAAIE,EAAcF,EAAKpD,GACpB5B,EAAO+C,IAAI3E,EAAKoD,EAAW0D,KAC1BD,EAAW7C,KAAK8C,GAMxB,GAAyB,IAAtBD,EAAWjD,OACV,OAAO,EAGJ,GAAyB,IAAtBiD,EAAWjD,OAAa,CAC1B8C,EACA9E,EAAOkC,QAAQV,EAAYyD,EAAW,GAAI7G,GAE9C,IAAI0G,EACA,OAAO,GAKnB,OAAOtD,GAQXxB,EAAOyD,qBAAuB,SAASnB,GAGnC,IAAI6C,EAAmB,GAGvB,GAAG7C,EAAMN,QAAU5B,EAAQ4B,OACvB,KAAM,iCAGN,IAAI,IAAIT,KAAKnB,EACT+E,EAAiB/E,EAAQmB,IAAMe,EAAMf,GAI7C,OAAO4D,GAGXnF,EAAOc,sBAAwB,SAASsE,EAASC,GAG7C,IAAIC,EAAkB,GAGtB,IAAI,IAAI1D,KAAMwD,EAAQ,CAClB,IAAIG,EAAaH,EAAQxD,GAGrB4D,EAAmB,GAIvB,IAAI,IAAIT,KAAMM,EAAM,CAChB,IAAII,EAAWJ,EAAMN,IAEgB,IAAlCU,EAASC,QAAQH,IAChBC,EAAiBpD,KAAKqD,GAK9BH,EAAgBC,GAAcC,EAGlC,OAAOF,GAGXtF,EAAOe,sBAAwB,SAASqE,EAASO,GAI7C,IAAIC,EAAmB,GAGvB,IAAI,IAAIhE,KAAMwD,EAAQ,CAClB,IAAIG,EAAaH,EAAQxD,GACrB4D,EAAmBG,EAAUJ,GAG7BM,EAAmB,GAGvB,IAAI,IAAIC,KAAON,EAAiB,CAC5B,IAAIC,EAAWD,EAAiBM,GAEhC,IAAI,IAAIf,KAAMU,EAAS,CACnB,IAAIM,EAAkBN,EAASV,IAEmB,IAA/Cc,EAAiBH,QAAQK,IACpBA,IAAoBR,GACxBM,EAAiBzD,KAAK2D,IAMlCH,EAAiBL,GAAcM,EAGnC,OAAOD,GAGX5F,EAAOa,eAAiB,SAASwC,EAAM2C,GAGnC,IAAIX,EAAQ,GAGZ,IAAI,IAAIY,KAAM5C,EACVgC,EAAMjD,KAAKpC,EAAOY,OAAOyC,EAAK4C,GAAKD,IAIvC,IAAI,IAAIE,KAAMF,EACXX,EAAMjD,KAAKpC,EAAOY,OAAOyC,EAAM2C,EAAKE,KAIvC,IAAIC,EAAc,CAAC,MAAO,MAAO,OAC7BC,EAAc,CAAC,MAAO,MAAO,OACjC,IAAI,IAAIC,KAAOF,EACX,IAAI,IAAIG,KAAOF,EACXf,EAAMjD,KAAKpC,EAAOY,OAAOuF,EAAYE,GAAMD,EAAYE,KAI/D,OAAOjB,GAMXrF,EAAOuG,qBAAuB,SAASC,GAGnC,IAAInD,EAAO,GACPC,EAAU,GACd,IAAI,IAAI/B,KAAKiF,EACTlD,EAAQlB,KAAKoE,EAAajF,IACvBA,EAAI,GAAK,IACR8B,EAAKjB,KAAKkB,GACVA,EAAU,IAGlB,OAAOD,GAGXrD,EAAOyG,qBAAuB,SAASC,GAInC,IADA,IAAIF,EAAe,GACXG,EAAI,EAAGA,EAAI,IAAKA,EACpB,IAAI,IAAIC,EAAI,EAAGA,EAAI,IAAKA,EACpBJ,GAAgBE,EAAWC,GAAGC,GAGtC,OAAOJ,GAOXxG,EAAO6G,YAAc,SAASvE,GAK1B,IAAIO,EAAS7C,EAAO8C,eAAeR,GACnC,IAAc,IAAXO,EACC,MAAMA,EAGV,IAAIiE,EAAY,IACZC,EAAY,KAEZC,EAAgB,KAChBC,EAAgB,KAEhBC,EAAiB,GAErB,IAAI,IAAI3F,KAAKe,EAAM,CACf,IAAIT,EAASS,EAAMf,GAGnB2F,GAAkBrF,EAASiF,EAGxBvF,EAAI,IAAM,IACT2F,GAAkBF,GAInBzF,EAAI,IAAM,IACT2F,GAAkBH,GAInBxF,EAAI,KAAO,KACV2F,GAAkBD,GAI1BE,QAAQC,IAAIF,IAGhBlH,EAAO8C,eAAiB,SAASR,GAM7B,IAAIA,EACA,MAAO,cAIX,GAAGA,EAAMN,SAAWvB,EAChB,MAAO,6CAA+CA,EAC9C,YAIZ,IAAI,IAAIc,KAAKe,EACT,IAAItC,EAAO+C,IAAIT,EAAMf,GAAIvB,EAAOC,SAAWqC,EAAMf,KAAOvB,EAAOgB,WAC3D,MAAO,gDAAkDO,EACjD,KAAOe,EAAMf,GAK7B,OAAO,GAGXvB,EAAOY,OAAS,SAASyG,EAAGC,GAKxB,IAAItE,EAAS,GACb,IAAI,IAAIuE,KAAMF,EACV,IAAI,IAAIG,KAAMF,EACVtE,EAAOZ,KAAKiF,EAAEE,GAAMD,EAAEE,IAG9B,OAAOxE,GAGXhD,EAAO+C,IAAM,SAAS0E,EAAGC,GAGrB,OAA2B,IAApBA,EAAIhC,QAAQ+B,IAGvBzH,EAAO2H,YAAc,SAASD,GAI1B,IAAI,IAAInG,KAAKmG,EACT,GAAGA,EAAInG,GACH,OAAOmG,EAAInG,GAGnB,OAAO,GAGXvB,EAAO2B,SAAW,SAAS+F,GAMvB,IADA,IAAIE,EAAW,GACPrG,EAAI,EAAGA,EAAImG,EAAI1F,SAAUT,EAC7BqG,EAASxF,MAAK,GAGlB,IAAI,IAAIb,KAAKmG,EAAI,CACb,IAAIG,EAAK7H,EAAO+B,YAAY2F,EAAI1F,QAEhC,MAAM4F,EAASC,GACXA,EAAMA,EAAK,EAAMH,EAAI1F,OAAS,EAAK,EAAK6F,EAAK,EAGjDD,EAASC,GAAMH,EAAInG,GAGvB,OAAOqG,GAGX5H,EAAO+B,YAAc,SAAS+F,EAAKC,GAM/B,GADAA,EAAMA,GAAO,EACVD,EACC,OAAOE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,IAAQA,EAEjD,KAAM,mBAId/H,EAAOqC,YAAc,SAASqF,GAG1B,IAAIS,EAAU,GACVC,EAAU,GACd,IAAI,IAAI7G,KAAKmG,EAAI,CACb,IAAIW,EAAIX,EAAInG,GACR6G,EAAQC,KACRF,EAAQ/F,KAAKiG,GACbD,EAAQC,IAAK,GAGrB,OAAOF,GAGXnI,EAAOqB,aAAe,SAASiH,EAAIR,EAAKC,GAOpC,OAFAA,EAAMA,GAAO,EACbO,EAAKA,GAAM,EACRA,EAAKP,EACGA,EAERO,EAAKR,EACGA,EAEJQ,GAIX3H,KA1xBJ,CA6xBGhE","file":"js/chunk-19215694.097054df.js","sourcesContent":["import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=style&index=0&id=6c2a5ce9&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=style&index=0&id=6c2a5ce9&scoped=true&lang=css&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=style&index=0&id=51e71052&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=style&index=0&id=51e71052&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"game\"},[_c('Sudoku')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sudoku\"},[_c('div',{staticClass:\"row\"},[_c('h2',[_vm._v(\"Sudoku\")]),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.difficulty),expression:\"difficulty\"}],on:{\"change\":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.difficulty=$event.target.multiple ? $$selectedVal : $$selectedVal[0]},function($event){return _vm.generatePuzzle()}]}},_vm._l((_vm.levels),function(display,level){return _c('option',{key:level,domProps:{\"value\":level}},[_vm._v(\"\\n                \"+_vm._s(display)+\"\\n            \")])}),0)]),_c('div',{staticClass:\"grid\"},_vm._l((_vm.puzzle),function(row,rowIndex){return _c('div',{key:rowIndex,staticClass:\"row\"},_vm._l((row),function(cell,colIndex){return _c('div',{key:colIndex,staticClass:\"cell\",class:{'border-right': colIndex === 2 || colIndex === 5, 'border-bottom': rowIndex === 2 || rowIndex === 5, 'original': cell.original, 'active': _vm.activeRow === rowIndex && _vm.activeCol === colIndex, 'invalid': cell.value && _vm.isCellInvalid(rowIndex, colIndex, cell.value)},on:{\"click\":function($event){return _vm.setCellActive(rowIndex, colIndex, cell.original)}}},[_vm._v(\"\\n                \"+_vm._s(cell.value)+\"\\n            \")])}),0)}),0),_c('div',{staticClass:\"row\"},_vm._l((Array(9).keys()),function(value){return _c('button',{key:value,staticClass:\"btn\",attrs:{\"type\":\"button\",\"disabled\":_vm.activeRow === -1 || _vm.activeCol === -1},on:{\"click\":function($event){return _vm.setCellValue(value + 1)}}},[_vm._v(\"\\n            \"+_vm._s(value + 1)+\"\\n        \")])}),0)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"sudoku\">\r\n        <div class=\"row\">\r\n            <h2>Sudoku</h2>\r\n            \r\n            <select v-model=\"difficulty\" @change=\"generatePuzzle()\">\r\n                <option v-for=\"(display, level) in levels\" :key=\"level\" :value=\"level\">\r\n                    {{ display }}\r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"grid\">\r\n            <div class=\"row\" v-for=\"(row, rowIndex) in puzzle\" v-bind:key=\"rowIndex\">\r\n                <div class=\"cell\" @click=\"setCellActive(rowIndex, colIndex, cell.original)\" :class=\"{'border-right': colIndex === 2 || colIndex === 5, 'border-bottom': rowIndex === 2 || rowIndex === 5, 'original': cell.original, 'active': activeRow === rowIndex && activeCol === colIndex, 'invalid': cell.value && isCellInvalid(rowIndex, colIndex, cell.value)}\" v-for=\"(cell, colIndex) in row\" v-bind:key=\"colIndex\">\r\n                    {{ cell.value }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <button type=\"button\" class=\"btn\" @click=\"setCellValue(value + 1)\" v-for=\"value in Array(9).keys()\" :key=\"value\" :disabled=\"activeRow === -1 || activeCol === -1\">\r\n                {{ value + 1 }}\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n\r\nimport { sudoku } from 'sudoku.js/sudoku.js'\r\nexport default {\r\n    name: 'Sudoku',\r\n    data () {\r\n        return {\r\n            puzzle: [],\r\n            difficulty: 'easy',\r\n            activeRow: -1,\r\n            activeCol: -1,\r\n            levels: {\r\n                'easy':         'Lihtne',\r\n                'medium':       'Keskmine',\r\n                'hard':         'Raske',\r\n                'very-hard':    'Väga raske'\r\n            }\r\n        }\r\n    },\r\n    mounted () {\r\n        this.generatePuzzle();\r\n    },\r\n    methods: {\r\n        generatePuzzle () {\r\n            const boardString = sudoku.generate(this.difficulty);\r\n            this.puzzle = sudoku.board_string_to_grid(boardString)\r\n                .map(row => {\r\n                    return row.map(cell => {\r\n                        return {\r\n                            value: cell !== '.' ? parseInt(cell) : null,\r\n                            original: cell !== '.'\r\n                        }\r\n                    })\r\n                })\r\n\r\n            // console.log(this.puzzle)\r\n        },\r\n        setCellActive(row, col, original) {\r\n            if (original) {\r\n                return\r\n            }\r\n\r\n            if (this.activeRow === row && this.activeCol === col) {\r\n                this.activeRow = -1\r\n                this.activeCol = -1\r\n                return\r\n            }\r\n\r\n            this.activeRow = row;\r\n            this.activeCol = col;\r\n        },\r\n        setCellValue(value) {\r\n            this.puzzle[this.activeRow][this.activeCol].value = value;\r\n            this.activeRow = -1;\r\n            this.activeCol = -1;\r\n\r\n            if (this.isGameComplete()) {\r\n                const msg = [\r\n                    'Success!',\r\n                    `Difficulty: ${this.levels[this.difficulty]}`\r\n                ]\r\n\r\n                alert(msg.join('\\n'))\r\n                this.generatePuzzle();\r\n            }\r\n        },\r\n        isCellInvalid(row, col, value) {\r\n            if (!value) {\r\n                return true\r\n            }\r\n\r\n            for (let c = 0; c < 9; c++) {\r\n                if (this.puzzle[row][c].value === value && c !== col) {\r\n                    return true\r\n                }\r\n            }\r\n\r\n            for (let r = 0; r < 9; r++) {\r\n                if (this.puzzle[r][col].value === value && r !== row) {\r\n                    return true\r\n                }\r\n            }\r\n            \r\n            const rowStart = Math.floor(row / 3) * 3;\r\n            const colStart = Math.floor(col / 3) * 3;\r\n            \r\n            for (let r = rowStart; r < rowStart + 3; r++) {\r\n                for (let c = colStart; c < colStart + 3; c++) {\r\n                    if (this.puzzle[r][c].value === value && !(r === row && c === col)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false\r\n        },\r\n        isGameComplete () {\r\n            for (let r = 0; r < 9; r++) {\r\n                for (let c= 0; c < 9; c++) {\r\n                    if (this.isCellInvalid(r, c, this.puzzle[r][c].value)) {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n.sudoku {\r\n    width: 100%;\r\n    max-width: 420px;\r\n    margin: 0.5rem auto;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nh2 {\r\ncolor: #000;\r\npadding: 1rem 0;\r\n}\r\n\r\n.grid {\r\n    width: calc(9 * 40px);\r\n    margin: 0.5rem auto 1rem\r\n}\r\n.row {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.cell {\r\n    display: block;\r\n    width: 40px;\r\n    height: 40px;\r\n    box-sizing: border-box;\r\n    font-size: 1.5rem;\r\n    border: 1px solid #bbb;\r\n    line-height: 40px;\r\n    text-align: center;\r\n    cursor: default;\r\n}\r\n\r\n.cell.active {\r\n    background: #00c !important;\r\n    color: #fff;\r\n}\r\n\r\n.cell.invalid {\r\n    background: #ea3838;\r\n    color: #fff;\r\n}\r\n\r\n.cell.original {\r\n    font-weight: bold;\r\n}\r\n\r\n.cell:not(.original) {\r\n    cursor: pointer;\r\n}\r\n\r\n.cell.border-right {\r\n    border-right-width: 3px;\r\n}\r\n.cell.border-bottom {\r\n    border-bottom-width: 3px;\r\n}\r\n.btn {\r\n    width: 38px;\r\n    height: 38px;\r\n    cursor: pointer;\r\n    font-size: 1.5rem;\r\n}\r\n\r\n.btn:disabled {\r\n    cursor: not-allowed;\r\n}\r\n\r\n@media (max-width: 500px) {\r\n\r\n    select {\r\n        margin-left: 1rem;\r\n    }\r\n    .sudoku {\r\n        width: 100%;\r\n        margin: 0.5rem auto;\r\n    }\r\n\r\n    .grid {\r\n        width: calc(9 * 30px);\r\n        margin: 0.5rem auto 1rem\r\n    }\r\n\r\n    .row {\r\n        justify-content: center;\r\n    }\r\n\r\n    .cell {\r\n        display: block;\r\n        width: 30px;\r\n        height: 30px;\r\n        box-sizing: border-box;\r\n        font-size: 1.2rem;\r\n        border: 1px solid #bbb;\r\n        line-height: 30px;\r\n        text-align: center;\r\n        cursor: default;\r\n    }\r\n\r\n    .cell.border-right {\r\n        border-right-width: 2px;\r\n    }\r\n    .cell.border-bottom {\r\n        border-bottom-width: 2px;\r\n    }\r\n\r\n    .btn {\r\n        width: 30px;\r\n        height: 30px;\r\n        font-size: 1rem;\r\n    }\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sudoku.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Sudoku.vue?vue&type=template&id=6c2a5ce9&scoped=true&\"\nimport script from \"./Sudoku.vue?vue&type=script&lang=js&\"\nexport * from \"./Sudoku.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Sudoku.vue?vue&type=style&index=0&id=6c2a5ce9&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6c2a5ce9\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <div class=\"game\">\r\n    <Sudoku />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Sudoku from '@/components/Sudoku';\r\n\r\nexport default {\r\n  name: 'Game',\r\n  components: {\r\n    Sudoku\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  h1 {\r\n    color: #000;\r\n    padding: 1rem 0;\r\n  }\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Game.vue?vue&type=template&id=51e71052&scoped=true&\"\nimport script from \"./Game.vue?vue&type=script&lang=js&\"\nexport * from \"./Game.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Game.vue?vue&type=style&index=0&id=51e71052&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"51e71052\",\n  null\n  \n)\n\nexport default component.exports","/*\r\n    Sudoku.js\r\n    ---------\r\n\r\n    A Sudoku puzzle generator and solver JavaScript library.\r\n\r\n    Please see the README for more details.\r\n*/\r\n\r\n(function(root){\r\n    var sudoku = root.sudoku = {};  // Global reference to the sudoku library\r\n\r\n    sudoku.DIGITS = \"123456789\";    // Allowed sudoku.DIGITS\r\n    var ROWS = \"ABCDEFGHI\";         // Row lables\r\n    var COLS = sudoku.DIGITS;       // Column lables\r\n    var SQUARES = null;             // Square IDs\r\n\r\n    var UNITS = null;               // All units (row, column, or box)\r\n    var SQUARE_UNITS_MAP = null;    // Squares -> units map\r\n    var SQUARE_PEERS_MAP = null;    // Squares -> peers map\r\n    \r\n    var MIN_GIVENS = 17;            // Minimum number of givens \r\n    var NR_SQUARES = 81;            // Number of squares\r\n    \r\n    // Define difficulties by how many squares are given to the player in a new\r\n    // puzzle.\r\n    var DIFFICULTY = {\r\n        \"easy\":         62,\r\n        \"medium\":       53,\r\n        \"hard\":         44,\r\n        \"very-hard\":    35,\r\n        \"insane\":       26,\r\n        \"inhuman\":      17,\r\n    };\r\n\r\n    // Blank character and board representation\r\n    sudoku.BLANK_CHAR = '.';\r\n    sudoku.BLANK_BOARD = \"....................................................\"+\r\n            \".............................\";\r\n\r\n    // Init\r\n    // -------------------------------------------------------------------------\r\n    function initialize(){\r\n        /* Initialize the Sudoku library (invoked after library load)\r\n        */\r\n        SQUARES             = sudoku._cross(ROWS, COLS);\r\n        UNITS               = sudoku._get_all_units(ROWS, COLS);\r\n        SQUARE_UNITS_MAP    = sudoku._get_square_units_map(SQUARES, UNITS);\r\n        SQUARE_PEERS_MAP    = sudoku._get_square_peers_map(SQUARES, \r\n                                    SQUARE_UNITS_MAP);\r\n    }\r\n\r\n    // Generate\r\n    // -------------------------------------------------------------------------\r\n    sudoku.generate = function(difficulty, unique){\r\n        /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\r\n        \r\n            // Generate an \"easy\" sudoku puzzle\r\n            sudoku.generate(\"easy\");\r\n            \r\n        \r\n        Difficulties are as follows, and represent the number of given squares:\r\n        \r\n                \"easy\":         61\r\n                \"medium\":       52\r\n                \"hard\":         43\r\n                \"very-hard\":    34\r\n                \"insane\":       25\r\n                \"inhuman\":      17\r\n            \r\n            \r\n        You may also enter a custom number of squares to be given, e.g.,\r\n        \r\n            // Generate a new Sudoku puzzle with 60 given squares\r\n            sudoku.generate(60)\r\n    \r\n    \r\n        `difficulty` must be a number between 17 and 81 inclusive. If it's\r\n        outside of that range, `difficulty` will be set to the closest bound,\r\n        e.g., 0 -> 17, and 100 -> 81.\r\n        \r\n        \r\n        By default, the puzzles are unique, uless you set `unique` to false. \r\n        (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not* \r\n        guaranteed to have unique solutions)\r\n        \r\n        TODO: Implement puzzle uniqueness\r\n        */\r\n        \r\n        // If `difficulty` is a string or undefined, convert it to a number or\r\n        // default it to \"easy\" if undefined.\r\n        if(typeof difficulty === \"string\" || typeof difficulty === \"undefined\"){\r\n            difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\r\n        }\r\n        \r\n        // Force difficulty between 17 and 81 inclusive\r\n        difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1, \r\n                MIN_GIVENS);\r\n        \r\n        // Default unique to true\r\n        unique = unique || true;\r\n        \r\n        // Get a set of squares and all possible candidates for each square\r\n        var blank_board = \"\";\r\n        for(var i = 0; i < NR_SQUARES; ++i){\r\n            blank_board += '.';\r\n        }\r\n        var candidates = sudoku._get_candidates_map(blank_board);\r\n        \r\n        // For each item in a shuffled list of squares\r\n        var shuffled_squares = sudoku._shuffle(SQUARES);\r\n        for(var si in shuffled_squares){\r\n            var square = shuffled_squares[si];\r\n            \r\n            // If an assignment of a random chioce causes a contradictoin, give\r\n            // up and try again\r\n            var rand_candidate_idx = \r\n                    sudoku._rand_range(candidates[square].length);\r\n            var rand_candidate = candidates[square][rand_candidate_idx];\r\n            if(!sudoku._assign(candidates, square, rand_candidate)){\r\n                break;\r\n            }\r\n            \r\n            // Make a list of all single candidates\r\n            var single_candidates = [];\r\n            for(var si in SQUARES){\r\n                var square = SQUARES[si];\r\n                \r\n                if(candidates[square].length == 1){\r\n                    single_candidates.push(candidates[square]);\r\n                }\r\n            }\r\n            \r\n            // If we have at least difficulty, and the unique candidate count is\r\n            // at least 8, return the puzzle!\r\n            if(single_candidates.length >= difficulty && \r\n                    sudoku._strip_dups(single_candidates).length >= 8){\r\n                var board = \"\";\r\n                var givens_idxs = [];\r\n                for(var i in SQUARES){\r\n                    var square = SQUARES[i];\r\n                    if(candidates[square].length == 1){\r\n                        board += candidates[square];\r\n                        givens_idxs.push(i);\r\n                    } else {\r\n                        board += sudoku.BLANK_CHAR;\r\n                    }\r\n                }\r\n                \r\n                // If we have more than `difficulty` givens, remove some random\r\n                // givens until we're down to exactly `difficulty`\r\n                var nr_givens = givens_idxs.length;\r\n                if(nr_givens > difficulty){\r\n                    givens_idxs = sudoku._shuffle(givens_idxs);\r\n                    for(var i = 0; i < nr_givens - difficulty; ++i){\r\n                        var target = parseInt(givens_idxs[i]);\r\n                        board = board.substr(0, target) + sudoku.BLANK_CHAR + \r\n                            board.substr(target + 1);\r\n                    }\r\n                }\r\n                \r\n                // Double check board is solvable\r\n                // TODO: Make a standalone board checker. Solve is expensive.\r\n                if(sudoku.solve(board)){\r\n                    return board;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Give up and try a new puzzle\r\n        return sudoku.generate(difficulty);\r\n    };\r\n\r\n    // Solve\r\n    // -------------------------------------------------------------------------\r\n    sudoku.solve = function(board, reverse){\r\n        /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character \r\n        string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\r\n        squares. There must be a minimum of 17 givens. If the given board has no\r\n        solutions, return false.\r\n        \r\n        Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\r\n        possibilities in reverse. Useful for checking if there is more than one\r\n        solution.\r\n        */\r\n        \r\n        // Assure a valid board\r\n        var report = sudoku.validate_board(board);\r\n        if(report !== true){\r\n            throw report;\r\n        }\r\n        \r\n        // Check number of givens is at least MIN_GIVENS\r\n        var nr_givens = 0;\r\n        for(var i in board){\r\n            if(board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)){\r\n                ++nr_givens;\r\n            }\r\n        }\r\n        if(nr_givens < MIN_GIVENS){\r\n            throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\r\n        }\r\n\r\n        // Default reverse to false\r\n        reverse = reverse || false;\r\n\r\n        var candidates = sudoku._get_candidates_map(board);\r\n        var result = sudoku._search(candidates, reverse);\r\n        \r\n        if(result){\r\n            var solution = \"\";\r\n            for(var square in result){\r\n                solution += result[square];\r\n            }\r\n            return solution;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    sudoku.get_candidates = function(board){\r\n        /* Return all possible candidatees for each square as a grid of \r\n        candidates, returnning `false` if a contradiction is encountered.\r\n        \r\n        Really just a wrapper for sudoku._get_candidates_map for programmer\r\n        consumption.\r\n        */\r\n        \r\n        // Assure a valid board\r\n        var report = sudoku.validate_board(board);\r\n        if(report !== true){\r\n            throw report;\r\n        }\r\n        \r\n        // Get a candidates map\r\n        var candidates_map = sudoku._get_candidates_map(board);\r\n        \r\n        // If there's an error, return false\r\n        if(!candidates_map){\r\n            return false;\r\n        }\r\n        \r\n        // Transform candidates map into grid\r\n        var rows = [];\r\n        var cur_row = [];\r\n        var i = 0;\r\n        for(var square in candidates_map){\r\n            var candidates = candidates_map[square];\r\n            cur_row.push(candidates);\r\n            if(i % 9 == 8){\r\n                rows.push(cur_row);\r\n                cur_row = [];\r\n            }\r\n            ++i;\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    sudoku._get_candidates_map = function(board){\r\n        /* Get all possible candidates for each square as a map in the form\r\n        {square: sudoku.DIGITS} using recursive constraint propagation. Return `false` \r\n        if a contradiction is encountered\r\n        */\r\n        \r\n        // Assure a valid board\r\n        var report = sudoku.validate_board(board);\r\n        if(report !== true){\r\n            throw report;\r\n        }\r\n        \r\n        var candidate_map = {};\r\n        var squares_values_map = sudoku._get_square_vals_map(board);\r\n        \r\n        // Start by assigning every digit as a candidate to every square\r\n        for(var si in SQUARES){\r\n            candidate_map[SQUARES[si]] = sudoku.DIGITS;\r\n        }\r\n        \r\n        // For each non-blank square, assign its value in the candidate map and\r\n        // propigate.\r\n        for(var square in squares_values_map){\r\n            var val = squares_values_map[square];\r\n            \r\n            if(sudoku._in(val, sudoku.DIGITS)){\r\n                var new_candidates = sudoku._assign(candidate_map, square, val);\r\n                \r\n                // Fail if we can't assign val to square\r\n                if(!new_candidates){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return candidate_map;\r\n    };\r\n\r\n    sudoku._search = function(candidates, reverse){\r\n        /* Given a map of squares -> candiates, using depth-first search, \r\n        recursively try all possible values until a solution is found, or false\r\n        if no solution exists. \r\n        */\r\n        \r\n        // Return if error in previous iteration\r\n        if(!candidates){\r\n            return false;\r\n        }\r\n        \r\n        // Default reverse to false\r\n        reverse = reverse || false;\r\n        \r\n        // If only one candidate for every square, we've a solved puzzle!\r\n        // Return the candidates map.\r\n        var max_nr_candidates = 0;\r\n        var max_candidates_square = null;\r\n        for(var si in SQUARES){\r\n            var square = SQUARES[si];\r\n            \r\n            var nr_candidates = candidates[square].length;\r\n                \r\n            if(nr_candidates > max_nr_candidates){\r\n                max_nr_candidates = nr_candidates;\r\n                max_candidates_square = square;\r\n            }\r\n        }\r\n        if(max_nr_candidates === 1){\r\n            return candidates;\r\n        }\r\n        \r\n        // Choose the blank square with the fewest possibilities > 1\r\n        var min_nr_candidates = 10;\r\n        var min_candidates_square = null;\r\n        for(si in SQUARES){\r\n            var square = SQUARES[si];\r\n            \r\n            var nr_candidates = candidates[square].length;\r\n            \r\n            if(nr_candidates < min_nr_candidates && nr_candidates > 1){\r\n                min_nr_candidates = nr_candidates;\r\n                min_candidates_square = square;\r\n            }\r\n        }\r\n        \r\n        // Recursively search through each of the candidates of the square \r\n        // starting with the one with fewest candidates.\r\n        \r\n        // Rotate through the candidates forwards\r\n        var min_candidates = candidates[min_candidates_square];\r\n        if(!reverse){\r\n            for(var vi in min_candidates){\r\n                var val = min_candidates[vi];\r\n                \r\n                // TODO: Implement a non-rediculous deep copy function\r\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\r\n                var candidates_next = sudoku._search(\r\n                    sudoku._assign(candidates_copy, min_candidates_square, val)\r\n                );\r\n                \r\n                if(candidates_next){\r\n                    return candidates_next;\r\n                }\r\n            }\r\n            \r\n        // Rotate through the candidates backwards\r\n        } else {\r\n            for(var vi = min_candidates.length - 1; vi >= 0; --vi){\r\n                var val = min_candidates[vi];\r\n                \r\n                // TODO: Implement a non-rediculous deep copy function\r\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\r\n                var candidates_next = sudoku._search(\r\n                    sudoku._assign(candidates_copy, min_candidates_square, val), \r\n                    reverse\r\n                );\r\n                \r\n                if(candidates_next){\r\n                    return candidates_next;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // If we get through all combinations of the square with the fewest\r\n        // candidates without finding an answer, there isn't one. Return false.\r\n        return false;\r\n    };\r\n\r\n    sudoku._assign = function(candidates, square, val){\r\n        /* Eliminate all values, *except* for `val`, from `candidates` at \r\n        `square` (candidates[square]), and propagate. Return the candidates map\r\n        when finished. If a contradiciton is found, return false.\r\n        \r\n        WARNING: This will modify the contents of `candidates` directly.\r\n        */\r\n\r\n        // Grab a list of canidates without 'val'\r\n        var other_vals = candidates[square].replace(val, \"\");\r\n\r\n        // Loop through all other values and eliminate them from the candidates \r\n        // at the current square, and propigate. If at any point we get a \r\n        // contradiction, return false.\r\n        for(var ovi in other_vals){\r\n            var other_val = other_vals[ovi];\r\n\r\n            var candidates_next =\r\n                sudoku._eliminate(candidates, square, other_val);\r\n\r\n            if(!candidates_next){\r\n                //console.log(\"Contradiction found by _eliminate.\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return candidates;\r\n    };\r\n\r\n    sudoku._eliminate = function(candidates, square, val){\r\n        /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\r\n        and propagate when values or places <= 2. Return updated candidates,\r\n        unless a contradiction is detected, in which case, return false.\r\n        \r\n        WARNING: This will modify the contents of `candidates` directly.\r\n        */\r\n\r\n        // If `val` has already been eliminated from candidates[square], return\r\n        // with candidates.\r\n        if(!sudoku._in(val, candidates[square])){\r\n            return candidates;\r\n        }\r\n\r\n        // Remove `val` from candidates[square]\r\n        candidates[square] = candidates[square].replace(val, '');\r\n           \r\n        // If the square has only candidate left, eliminate that value from its \r\n        // peers\r\n        var nr_candidates = candidates[square].length;\r\n        if(nr_candidates === 1){\r\n            var target_val = candidates[square];\r\n            \r\n            for(var pi in SQUARE_PEERS_MAP[square]){\r\n                var peer = SQUARE_PEERS_MAP[square][pi];\r\n                \r\n                var candidates_new = \r\n                        sudoku._eliminate(candidates, peer, target_val);\r\n                        \r\n                if(!candidates_new){\r\n                    return false;\r\n                }\r\n            }\r\n        \r\n        // Otherwise, if the square has no candidates, we have a contradiction.\r\n        // Return false.\r\n        } if(nr_candidates === 0){\r\n            return false;\r\n        }\r\n        \r\n        // If a unit is reduced to only one place for a value, then assign it\r\n        for(var ui in SQUARE_UNITS_MAP[square]){\r\n            var unit = SQUARE_UNITS_MAP[square][ui];\r\n            \r\n            var val_places = [];\r\n            for(var si in unit){\r\n                var unit_square = unit[si];\r\n                if(sudoku._in(val, candidates[unit_square])){\r\n                    val_places.push(unit_square);\r\n                }\r\n            }\r\n            \r\n            // If there's no place for this value, we have a contradition!\r\n            // return false\r\n            if(val_places.length === 0){\r\n                return false;\r\n                \r\n            // Otherwise the value can only be in one place. Assign it there.\r\n            } else if(val_places.length === 1){\r\n                var candidates_new = \r\n                    sudoku._assign(candidates, val_places[0], val);\r\n                \r\n                if(!candidates_new){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return candidates;\r\n    };\r\n\r\n    \r\n    // Square relationships\r\n    // -------------------------------------------------------------------------\r\n    // Squares, and their relationships with values, units, and peers.\r\n    \r\n    sudoku._get_square_vals_map = function(board){\r\n        /* Return a map of squares -> values\r\n        */\r\n        var squares_vals_map = {};\r\n        \r\n        // Make sure `board` is a string of length 81\r\n        if(board.length != SQUARES.length){\r\n            throw \"Board/squares length mismatch.\";\r\n            \r\n        } else {\r\n            for(var i in SQUARES){\r\n                squares_vals_map[SQUARES[i]] = board[i];\r\n            }\r\n        }\r\n        \r\n        return squares_vals_map;\r\n    };\r\n\r\n    sudoku._get_square_units_map = function(squares, units){\r\n        /* Return a map of `squares` and their associated units (row, col, box)\r\n        */\r\n        var square_unit_map = {};\r\n\r\n        // For every square...\r\n        for(var si in squares){\r\n            var cur_square = squares[si];\r\n\r\n            // Maintain a list of the current square's units\r\n            var cur_square_units = [];\r\n\r\n            // Look through the units, and see if the current square is in it,\r\n            // and if so, add it to the list of of the square's units.\r\n            for(var ui in units){\r\n                var cur_unit = units[ui];\r\n\r\n                if(cur_unit.indexOf(cur_square) !== -1){\r\n                    cur_square_units.push(cur_unit);\r\n                }\r\n            }\r\n\r\n            // Save the current square and its units to the map\r\n            square_unit_map[cur_square] = cur_square_units;\r\n        }\r\n\r\n        return square_unit_map;\r\n    };\r\n\r\n    sudoku._get_square_peers_map = function(squares, units_map){\r\n        /* Return a map of `squares` and their associated peers, i.e., a set of\r\n        other squares in the square's unit.\r\n        */\r\n        var square_peers_map = {};\r\n\r\n        // For every square...\r\n        for(var si in squares){\r\n            var cur_square = squares[si];\r\n            var cur_square_units = units_map[cur_square];\r\n\r\n            // Maintain list of the current square's peers\r\n            var cur_square_peers = [];\r\n\r\n            // Look through the current square's units map...\r\n            for(var sui in cur_square_units){\r\n                var cur_unit = cur_square_units[sui];\r\n\r\n                for(var ui in cur_unit){\r\n                    var cur_unit_square = cur_unit[ui];\r\n\r\n                    if(cur_square_peers.indexOf(cur_unit_square) === -1 && \r\n                            cur_unit_square !== cur_square){\r\n                        cur_square_peers.push(cur_unit_square);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Save the current square an its associated peers to the map\r\n            square_peers_map[cur_square] = cur_square_peers;\r\n        }\r\n\r\n        return square_peers_map;\r\n    };\r\n    \r\n    sudoku._get_all_units = function(rows, cols){\r\n        /* Return a list of all units (rows, cols, boxes)\r\n        */\r\n        var units = [];\r\n\r\n        // Rows\r\n        for(var ri in rows){\r\n            units.push(sudoku._cross(rows[ri], cols));\r\n        }\r\n\r\n        // Columns\r\n        for(var ci in cols){\r\n           units.push(sudoku._cross(rows, cols[ci]));\r\n        }\r\n\r\n        // Boxes\r\n        var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\r\n        var col_squares = [\"123\", \"456\", \"789\"];\r\n        for(var rsi in row_squares){\r\n            for(var csi in col_squares){\r\n                units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\r\n            }\r\n        }\r\n\r\n        return units;\r\n    };\r\n    \r\n\r\n    // Conversions\r\n    // -------------------------------------------------------------------------\r\n    sudoku.board_string_to_grid = function(board_string){\r\n        /* Convert a board string to a two-dimensional array\r\n        */\r\n        var rows = [];\r\n        var cur_row = [];\r\n        for(var i in board_string){\r\n            cur_row.push(board_string[i]);\r\n            if(i % 9 == 8){\r\n                rows.push(cur_row);\r\n                cur_row = [];\r\n            }\r\n        }\r\n        return rows;\r\n    };\r\n    \r\n    sudoku.board_grid_to_string = function(board_grid){\r\n        /* Convert a board grid to a string\r\n        */\r\n        var board_string = \"\";\r\n        for(var r = 0; r < 9; ++r){\r\n            for(var c = 0; c < 9; ++c){\r\n                board_string += board_grid[r][c];\r\n            }   \r\n        }\r\n        return board_string;\r\n    };\r\n    \r\n\r\n    // Utility\r\n    // -------------------------------------------------------------------------\r\n\r\n    sudoku.print_board = function(board){\r\n        /* Print a sudoku `board` to the console.\r\n        */\r\n        \r\n        // Assure a valid board\r\n        var report = sudoku.validate_board(board);\r\n        if(report !== true){\r\n            throw report;\r\n        }\r\n        \r\n        var V_PADDING = \" \";  // Insert after each square\r\n        var H_PADDING = '\\n'; // Insert after each row\r\n        \r\n        var V_BOX_PADDING = \"  \"; // Box vertical padding\r\n        var H_BOX_PADDING = '\\n'; // Box horizontal padding\r\n\r\n        var display_string = \"\";\r\n        \r\n        for(var i in board){\r\n            var square = board[i];\r\n            \r\n            // Add the square and some padding\r\n            display_string += square + V_PADDING;\r\n            \r\n            // Vertical edge of a box, insert v. box padding\r\n            if(i % 3 === 2){\r\n                display_string += V_BOX_PADDING;\r\n            }\r\n            \r\n            // End of a line, insert horiz. padding\r\n            if(i % 9 === 8){\r\n                display_string += H_PADDING;\r\n            }\r\n            \r\n            // Horizontal edge of a box, insert h. box padding\r\n            if(i % 27 === 26){\r\n                display_string += H_BOX_PADDING;\r\n            }\r\n        }\r\n\r\n        console.log(display_string);\r\n    };\r\n\r\n    sudoku.validate_board = function(board){\r\n        /* Return if the given `board` is valid or not. If it's valid, return\r\n        true. If it's not, return a string of the reason why it's not.\r\n        */\r\n        \r\n        // Check for empty board\r\n        if(!board){\r\n            return \"Empty board\";\r\n        }\r\n        \r\n        // Invalid board length\r\n        if(board.length !== NR_SQUARES){\r\n            return \"Invalid board size. Board must be exactly \" + NR_SQUARES +\r\n                    \" squares.\";\r\n        }\r\n        \r\n        // Check for invalid characters\r\n        for(var i in board){\r\n            if(!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR){\r\n                return \"Invalid board character encountered at index \" + i + \r\n                        \": \" + board[i];\r\n            }\r\n        }\r\n        \r\n        // Otherwise, we're good. Return true.\r\n        return true;\r\n    };\r\n\r\n    sudoku._cross = function(a, b){\r\n        /* Cross product of all elements in `a` and `b`, e.g.,\r\n        sudoku._cross(\"abc\", \"123\") ->\r\n        [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\r\n        */\r\n        var result = [];\r\n        for(var ai in a){\r\n            for(var bi in b){\r\n                result.push(a[ai] + b[bi]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    sudoku._in = function(v, seq){\r\n        /* Return if a value `v` is in sequence `seq`.\r\n        */\r\n        return seq.indexOf(v) !== -1;\r\n    };\r\n    \r\n    sudoku._first_true = function(seq){\r\n        /* Return the first element in `seq` that is true. If no element is\r\n        true, return false.\r\n        */\r\n        for(var i in seq){\r\n            if(seq[i]){\r\n                return seq[i];\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    sudoku._shuffle = function(seq){\r\n        /* Return a shuffled version of `seq`\r\n        */\r\n        \r\n        // Create an array of the same size as `seq` filled with false\r\n        var shuffled = [];\r\n        for(var i = 0; i < seq.length; ++i){\r\n            shuffled.push(false);\r\n        }\r\n        \r\n        for(var i in seq){\r\n            var ti = sudoku._rand_range(seq.length);\r\n            \r\n            while(shuffled[ti]){\r\n                ti = (ti + 1) > (seq.length - 1) ? 0 : (ti + 1);\r\n            }\r\n            \r\n            shuffled[ti] = seq[i];\r\n        }\r\n        \r\n        return shuffled;\r\n    };\r\n\r\n    sudoku._rand_range = function(max, min){\r\n        /* Get a random integer in the range of `min` to `max` (non inclusive).\r\n        If `min` not defined, default to 0. If `max` not defined, throw an \r\n        error.\r\n        */\r\n        min = min || 0;\r\n        if(max){\r\n            return Math.floor(Math.random() * (max - min)) + min;\r\n        } else {\r\n            throw \"Range undefined\";\r\n        }\r\n    };\r\n\r\n    sudoku._strip_dups = function(seq){\r\n        /* Strip duplicate values from `seq`\r\n        */\r\n        var seq_set = [];\r\n        var dup_map = {};\r\n        for(var i in seq){\r\n            var e = seq[i];\r\n            if(!dup_map[e]){\r\n                seq_set.push(e);\r\n                dup_map[e] = true;\r\n            }\r\n        }\r\n        return seq_set;\r\n    };\r\n    \r\n    sudoku._force_range = function(nr, max, min){\r\n        /* Force `nr` to be within the range from `min` to, but not including, \r\n        `max`. `min` is optional, and will default to 0. If `nr` is undefined,\r\n        treat it as zero.\r\n        */\r\n        min = min || 0\r\n        nr = nr || 0\r\n        if(nr < min){\r\n            return min;\r\n        }\r\n        if(nr > max){\r\n            return max;\r\n        }\r\n        return nr\r\n    }\r\n\r\n    // Initialize library after load\r\n    initialize();\r\n\r\n// Pass whatever the root object is, lsike 'window' in browsers\r\n})(this);"],"sourceRoot":""}